module mhd_m
  use constants_m
  use grid_m
  use vector_field_m
  use insitu2d_m
  use ut_m
  implicit none
  private
  public :: mhd__finalize,  &
            mhd__initialize,  &
            mhd__step

  type, public :: mhd__field_t
    type(scalar_field_t) :: mass_density
    type(scalar_field_t) :: pressure
    type(vector_field_t) :: mass_flux
    type(vector_field_t) :: mag_field
  end type mhd__field_t

contains

  subroutine check_constants

    call ut__assert( mod( NCORE, 2 )==0,  &
                     "NCORE must be even for parallelization." )
    call ut__assert( EL_CUBE >= EL_CORE,  &
                     "Outer cube is smaller than inner cube? That's impossible!" )
    call ut__assert( DY==DX, "We assume isotropic grid (dx=dy=dz)." )
    call ut__assert( DZ==DY, "We assume isotropic grid (dx=dy=dz)." )

    call ut__message_leader( "Fortran const. SI", SI )
    call ut__message_leader( "Fortran const. DI", DI ) 
    call ut__message_leader( "Fortran const. SR", SR ) 
    call ut__message_leader( "Fortran const. DR", DR ) 
    call ut__message_leader( "Fortran const. NIL", NIL )

    call ut__message_leader( "Math const. PI", PI )
    call ut__message_leader( "Math const. TWOPI", TWOPI )

    call ut__message_leader( "Sim const. NCORE", NCORE )
    call ut__message_leader( "Sim const. NCUBE", NCUBE )
    call ut__message_leader( "Sim const. EL_TETRA", EL_TETRA )
    call ut__message_leader( "Sim const. EL_CORE", EL_CORE )
    call ut__message_leader( "Sim const. EL_CUBE", EL_CUBE )
    call ut__message_leader( "Sim const. DX", DX )
    call ut__message_leader( "Sim const. DY", DY )
    call ut__message_leader( "Sim const. DZ", DZ )
  end subroutine check_constants


  subroutine mhd__finalize

  end subroutine mhd__finalize


  subroutine mhd__initialize
    call check_constants
    call grid.initialize
  end subroutine mhd__initialize

  subroutine mhd__step
    
  end subroutine mhd__step
end module mhd_m