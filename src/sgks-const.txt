
==============================<!>==============================

  cg-mhd: Cubic Grid MHD Solver
                                           Akira Kageyama
                                   kage@port.kobe-u.ac.jp
                                               Kobe Univ.

  Note:
   * Written in "E-language". Apply "efpp.sh" for Fortran 2003.
   * We take the ``Keep it simple'' approach:
       + The grid spacings in three (x,y, and z) directions
         are all the same, i.e., dx=dy=dz.
       + Each MPI process has exactly the same volume of space as
         well as the grid spans. Therefore, each process has the
         same size of arrays for variables.
       + We do not care about the memory size. We take the
         so-called "rich-man's approach".
       + We also disregard the interprocess communication
         redundancy. Simplicity surpasses communication stinginess.

  const.e03
    Constants with the Global Scope.

  History
    2013.04.04: Developed by Akira Kageyama
    2013.04.04: This is for cg-mhd.
    2013.04.24: Still coding.
    2013.05.16: Still coding...
    2013.06.05: Finally, finished coding.
    2013.06.05: Start debugging.
    2013.06.12: Making use of typed parameters.
    2013.08.04: Minor. +mean_mass. Comments and format.
    2014.12.05: +comment on inter process communication.
    2017.06.28: Moved connstans from const_input.dat.
    2017.07.17: Added const__print.
    2017.08.17: Combined params_input.dat.

==============================</!>==============================


module const_m
  implicit none
  private
  public :: const
  public :: SI, DI, SR, DR, SC, DC, PI, TWOPI, Z0, ZI
  public :: PHYS, GASS, SIMULATION_REGION, KARTE
  public :: NPROCS_X, NPROCS_Y, NPROCS_Z, CAMERAS
  public :: NPROCS_SIMULA, NPROCS_DS_SIM
  public :: NPROCS_DS_VIZ, NPROCS_VISUAL
  public :: NVIZFLD, VIZFLD_STR, VIZFLD_STR_LEN
  public :: NX_GLOBAL, NY_GLOBAL, NZ_GLOBAL
  public :: NXPP, NYPP, NZPP, NXPP1, NYPP1, NZPP1
  public :: FILE_NUM, CHAR, NIL


  type, public :: const_t
  contains
    procedure, nopass :: print => const__print
  end type const_t

  type(const_t) :: const


  !<< Fortran constants >>!
  integer <const> :: SI = selected_int_kind(6)
  integer <const> :: DI = selected_int_kind(15)
  integer <const> :: SR = selected_real_kind(6)
  integer <const> :: DR = selected_real_kind(15)
  integer <const> :: SC = kind((1.0_SR,1.0_SR))
  integer <const> :: DC = kind((1.0_DR,1.0_DR))

  !<< Mathematical constants >>!
  real(DR) <const> ::    PI = 3.1415926535897932_DR
  real(DR) <const> :: TWOPI = PI*2
  complex(DC) <const> ::    Z0 = (0.0_DR,0.0_DR)
  complex(DC) <const> ::    ZI = (0.0_DR,1.0_DR)

  !<< Physical constants >>!
  real(DR) <const> :: MAGNETIC_PERMEABILITY_ = 4*PI*1.0e-7_DR    ! m kg/s^2/A^2
  real(DR) <const> :: PROTON_MASS_           = 1.67262178e-27_DR ! kg
  real(DR) <const> :: ELECTRON_MASS_         = 9.10938291e-31_DR ! kg
  real(DR) <const> :: PLASMA_MEAN_MASS_ = ( PROTON_MASS_ + ELECTRON_MASS_ ) / 2
  real(DR) <const> :: BOLTZMANN_CONSTANT_    = 1.3806488e-23_DR  ! J/K
  real(DR) <const> :: SPECIFIC_HEATS_GAMMA_  = 5.0_DR / 3.0_DR

  !<< Gass related constants >>!
  real(DR) <const> :: INITIAL_DENSITY_     = 1.0_DR    ! kg/m^3
  real(DR) <const> :: INITIAL_TEMPERATURE_ = 1.0e6_DR  ! (K)
  real(DR) <const> :: VISCOSITY_           = 1.0e-3_DR    ! kg/(m s)
  real(DR) <const> :: KAPPA_               = 1.0e-3_DR ! J/(m s K)
  real(DR) <const> :: ETA_                 = 10.0e-3_DR ! Ohm m

  !<< Simulation size constants >>!
  real(DR) <const> :: CUBE_SIDE_LENGTH_ = 10.0_DR ! meters
  real(DR) <const> :: SIMULATION_REGION_XMIN_  &
                   = -3*CUBE_SIDE_LENGTH_ / 2
  real(DR) <const> :: SIMULATION_REGION_XMAX_  &
                   =  3*CUBE_SIDE_LENGTH_ / 2
  real(DR) <const> :: SIMULATION_REGION_YMIN_  &
                   = -CUBE_SIDE_LENGTH_ / 2
  real(DR) <const> :: SIMULATION_REGION_YMAX_  &
                   =  CUBE_SIDE_LENGTH_ / 2
  real(DR) <const> :: SIMULATION_REGION_ZMIN_  &
                   = -CUBE_SIDE_LENGTH_ / 2
  real(DR) <const> :: SIMULATION_REGION_ZMAX_  &
                   =  CUBE_SIDE_LENGTH_ / 2

  !<< Grid size constants >>!
  ! this is a test case. 264 = 68*4 - 2
  integer(SI) <const> :: NX_GLOBAL = 60   ! Must be even
  integer(SI) <const> :: NY_GLOBAL = 20   ! Must be even
  integer(SI) <const> :: NZ_GLOBAL = 20   ! Must be even

  !> integer(SI) <const> :: NX_GLOBAL = 46   ! Must be even
  !> integer(SI) <const> :: NY_GLOBAL = 46   ! Must be even
  !> integer(SI) <const> :: NZ_GLOBAL = 46   ! Must be even

  !> integer(SI) <const> :: NX_GLOBAL = 264   ! Must be even
  !> integer(SI) <const> :: NY_GLOBAL = 264   ! Must be even
  !> integer(SI) <const> :: NZ_GLOBAL = 264   ! Must be even

  !> integer(SI) <const> :: NX_GLOBAL = 96   ! Must be even
  !> integer(SI) <const> :: NY_GLOBAL = 96   ! Must be even
  !> integer(SI) <const> :: NZ_GLOBAL = 96   ! Must be even

    =====<!>=====
      NX_GLOBAL must be:
        (1) even number
        (2) multiple of NPROCS_X.
      in other words,
        mod(NX_GLOBAL,2) = mod(NX_GLOBAL,NPROCS_X) = 0
      So as Y and Z. We will confirm these in "grid__init".
    =====</!>=====

  !<< 4D street view constants >>!
  integer(SI) <const> :: NCAMERA_X_ = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NCAMERA_Y_ = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NCAMERA_Z_ = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NCAMERA_XYZ_ = NCAMERA_X_*NCAMERA_Y_*NCAMERA_Z_
  integer(SI) <const> :: NVIZFLD = 3  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: VIZFLD_STR_LEN = 20
  char(len=VIZFLD_STR_LEN) <const> :: VIZFLD_STR(NVIZFLD)   &
                            = [  &! "12345678901234567890"
                                    "mass density        "   &
                                   ,"pressure            "   &
                                  !,"temperature         "   &
                                   ,"enstrophy           "   &
                                  !,"magnetic energy     "   &
                                  !,"dynamo term         "   &
                              ]

  !<< MPI process constants >>!
  integer(SI) <const> :: NPROCS_X = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NPROCS_Y = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NPROCS_Z = 2  ! Raw number; mkjob.sh grep this.
  integer(SI) <const> :: NPROCS_SIMULA = NPROCS_X*NPROCS_Y*NPROCS_Z
  integer(SI) <const> :: NPROCS_DS_SIM = NVIZFLD
  integer(SI) <const> :: NPROCS_DS_VIZ = NVIZFLD
  integer(SI) <const> :: NPROCS_VISUAL = NCAMERA_XYZ_


  integer(SI) <const> :: NXPP = NX_GLOBAL/NPROCS_X ! grids per process
  integer(SI) <const> :: NYPP = NY_GLOBAL/NPROCS_Y
  integer(SI) <const> :: NZPP = NZ_GLOBAL/NPROCS_Z
  integer(SI) <const> :: NXPP1 = NXPP + 1
  integer(SI) <const> :: NYPP1 = NYPP + 1
  integer(SI) <const> :: NZPP1 = NZPP + 1

  !<< Visualization camera constants >>!
  type, public :: cameras_t
    integer(SI) :: nx, ny, nz
    integer(SI) :: nxyz
  end type

  type(cameras_t) <const> ::  &
    CAMERAS = cameras_t(NCAMERA_X_,  &
                        NCAMERA_Y_,  &
                        NCAMERA_Z_,  &
                        NCAMERA_XYZ_)

  !<< Physical constants >>!
  type, public :: phys_t
    real(DR) :: proton_mass
    real(DR) :: electron_mass
    real(DR) :: plasma_mean_mass
    real(DR) :: boltzmann_constant
    real(DR) :: magnetic_permeability
  end type phys_t

  type (phys_t) <const> ::  &
     PHYS = phys_t(PROTON_MASS_,  &
                   ELECTRON_MASS_,  &
                   PLASMA_MEAN_MASS_,  &
                   BOLTZMANN_CONSTANT_,  &
                   MAGNETIC_PERMEABILITY_)

  !<< Gass related constants >>!
  type, public :: gass_t
    real(DR) :: gamma
    real(DR) :: initial_density
    real(DR) :: initial_temperature
    real(DR) :: viscosity
    real(DR) :: kappa
    real(DR) :: eta
  end type gass_t


  !<< Simulation parameters >>!

  type (gass_t) <const> ::  &
     GASS = gass_t(SPECIFIC_HEATS_GAMMA_,  &
                   INITIAL_DENSITY_,  &
                   INITIAL_TEMPERATURE_,  &
                   VISCOSITY_,  &
                   KAPPA_,  &
                   ETA_  &
                   )

  !<< Simulation region >>!
  type, public :: simulation_region_t
    real(DR) :: xmin, xmax
    real(DR) :: ymin, ymax
    real(DR) :: zmin, zmax
  end type simulation_region_t

  type (simulation_region_t) <const> ::  &
     SIMULATION_REGION =  &
        simulation_region_t (SIMULATION_REGION_XMIN_, &
                             SIMULATION_REGION_XMAX_, &
                             SIMULATION_REGION_YMIN_, &
                             SIMULATION_REGION_YMAX_, &
                             SIMULATION_REGION_ZMIN_, &
                             SIMULATION_REGION_ZMAX_)

  !<< Job karte >>!
  type, public :: karte_t
    integer(SI) :: runnable
    integer(SI) :: success
    integer(SI) :: time_out
    integer(SI) :: overflow
    integer(SI) :: negative_anormaly
  end type karte_t

  type (karte_t) <const> ::  &
     KARTE = karte_t (0,  &
                      1,  &
                      2,  &
                      3,  &
                      4)

  !<< I/O >>!
  type, public :: file_num_t
    integer(SI) :: namelist
    integer(SI) :: standard_out
    integer(SI) :: quick_save
    integer(SI) :: old_restart
    integer(SI) :: new_restart
    integer(SI) :: insitu2d
    integer(SI) :: slice_2d_xy
    integer(SI) :: slice_2d_yz
    integer(SI) :: slice_2d_zx
    integer(SI) :: slice_2d_xy2
    integer(SI) :: slice_2d_xy3
    integer(SI) :: integrated_values
    integer(SI) :: viz_to_disk
    integer(SI) :: avs_data
  end type file_num_t

  type (file_num_t) <const> :: &
     FILE_NUM =                   &
        file_num_t (              &
                     05,          & ! namelist
                     06,          & ! standard_out
                     07,          & ! quick_save
                     10,          & ! old_restart
                     11,          & ! new_restart
                     20,          & ! insitu2d
                     21,          & ! slice_2d_xy
                     22,          & ! slice_2d_yz
                     23,          & ! slice_2d_zx
                     24,          & ! slice_2d_xy2
                     25,          & ! slice_2d_xy3
                     30,          & ! integrated_values
                     31,          & ! viz_to_disk
                     40           & ! avs_data
                   )
  !<< I/O file name length >>!

  type, public :: character_t
    integer(SI)   :: taglen
    integer(SI)   :: filelen
    character  :: slash
    character  :: ubar
    character  :: dot
  end type character_t

  type (character_t) <const>   &
     :: CHAR =                    &
        character_t (             &
                      100,        & ! taglen
                      150,        & ! filelen
                      '/',        & ! slash
                      '_',        & ! ubar
                      '.'         & ! dot
                    )

  !<< NULL >>!
  integer(SI) <const> :: NIL = huge(1)

  ====<!>====
    When your MPI doesn not support MPI_IN_PLACE, comment out
    the following line to define it as NIL. This flag will be
    used in mpiut__allreduce_sum etc.
  ====</!>====
  !  integer(SI) <const> :: MPI_IN_PLACE = NIL


contains


  subroutine print_DR(string,d)
    char(len=*) <in> :: string
    real(DR)    <in> :: d

    integer(SI) <const> :: TOTAL_LENGTH = 60
    char(len=22) :: string_for_value
    char(len=TOTAL_LENGTH) :: line

    line = repeat('.',TOTAL_LENGTH)

    write(string_for_value,'(1pe22.15)') d
    line(1:len_trim(string)) = trim(string)
    line(TOTAL_LENGTH-22:TOTAL_LENGTH) = string_for_value
    write(FILE_NUM.standard_out,*) line
  end subroutine print_DR


  subroutine print_SI(string,i)
    char(len=*) <in> :: string
    integer(SI)    <in> :: i

    integer(SI) <const> :: TOTAL_LENGTH = 60
    char(len=12) :: string_for_i01
    char(len=TOTAL_LENGTH) :: line

    line = repeat('.', TOTAL_LENGTH)

    write(string_for_i01,'(a1,i0)') ' ', i ! put a space in front of i
    line(1:len_trim(string)) = trim(string)
    line(TOTAL_LENGTH-len_trim(string_for_i01):TOTAL_LENGTH)    &
       = trim(string_for_i01)
    write(FILE_NUM.standard_out,*) line
  end subroutine print_SI


!  private
!=================
!  public

  subroutine const__print
    call print_SI('const SI', SI)
    call print_SI('const DI', DI)
    call print_SI('const SR', SR)
    call print_SI('const DR', DR)
    call print_SI('const SC', SC)
    call print_SI('const DC', DC)
    call print_DR('const PI', PI)
    call print_DR('const TWOPI', TWOPI)
    call print_SI('const: NVIZFLD',  &
                          NVIZFLD)
    call print_SI('const: NPROXS_X',  &
                          NPROCS_X)
    call print_SI('const: NPROXS_Y',  &
                          NPROCS_Y)
    call print_SI('const: NPROXS_Z',  &
                          NPROCS_Z)
    call print_SI('const: NPROCS_DS_SIM',  &
                          NPROCS_DS_SIM)
    call print_SI('const: NPROCS_DS_VIZ',  &
                          NPROCS_DS_VIZ)
    call print_SI('const: NPROCS_VISUAL',  &
                          NPROCS_VISUAL)
    call print_SI('const: NX_GLOBAL',  &
                          NX_GLOBAL)
    call print_SI('const: NY_GLOBAL',  &
                          NY_GLOBAL)
    call print_SI('const: NZ_GLOBAL',  &
                          NZ_GLOBAL)
    call print_SI('const: NXPP', &
                          NXPP)
    call print_SI('const: NYPP', &
                          NYPP)
    call print_SI('const: NZPP', &
                          NZPP)
    call print_SI('const: NXPP1', &
                          NXPP1)
    call print_SI('const: NYPP1', &
                          NYPP1)
    call print_SI('const: NZPP1', &
                          NZPP1)
    call print_SI('const: NIL', NIL)
    call print_DR('SIMULATION_REGION.xmin',  &
                   SIMULATION_REGION.xmin)
    call print_DR('SIMULATION_REGION.xmax',  &
                   SIMULATION_REGION.xmax)
    call print_DR('SIMULATION_REGION.ymin',  &
                   SIMULATION_REGION.ymin)
    call print_DR('SIMULATION_REGION.ymax',  &
                   SIMULATION_REGION.ymax)
    call print_DR('SIMULATION_REGION.zmin',  &
                   SIMULATION_REGION.zmin)
    call print_DR('SIMULATION_REGION.zmax',  &
                   SIMULATION_REGION.zmax)
    call print_DR('PHYS.proton_mass',  &
                   PHYS.proton_mass)
    call print_DR('PHYS.electron_mass',  &
                   PHYS.electron_mass)
    call print_DR('PHYS.plasma_mean_mass',  &
                   PHYS.plasma_mean_mass)
    call print_DR('PHYS.boltzmann_constant',  &
                   PHYS.boltzmann_constant)
    call print_DR('PHYS.magnetic_permeability',  &
                   PHYS.magnetic_permeability)
    call print_DR('GASS.gamma',  &
                   GASS.gamma)
    call print_DR('GASS.initial_density',  &
                   GASS.initial_density)
    call print_DR('GASS.initial_temperature',  &
                   GASS.initial_temperature)
    call print_DR('GASS.viscosity',  &
                   GASS.viscosity)
    call print_DR('GASS.kappa',  &
                   GASS.kappa)
    call print_DR('GASS.eta',  &
                   GASS.eta)
    call print_SI('CAMERAS.nx',  &
                   CAMERAS.nx)
    call print_SI('CAMERAS.ny',  &
                   CAMERAS.ny)
    call print_SI('CAMERAS.nz',  &
                   CAMERAS.nz)
    call print_SI('CAMERAS.nxyz',  &
                   CAMERAS.nxyz)

  end subroutine const__print

end module const_m
