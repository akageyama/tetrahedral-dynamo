module grid_m
  use constants_m
  use ut_m
  implicit none
  private

  type, public :: grid_t
    real(DR) :: d1 = 1 / (2*DX)
    real(DR) :: d2 = 1 / (DX*DX)
    real(DR), dimension(NC) :: pos
  contains    
    procedure :: initialize
  end type grid_t

  ! interface grid_t
  !       module procedure initialize
  !   end interface grid_t

  type(grid_t), public :: grid

contains

  subroutine initialize(self)
    class(grid_t) <out> :: self
    integer :: i

    do i = 1, NC
      self.pos(i) = -EL_CUBE/2 + (i-1)*DX
    end do

    do k = 1, NC
      do j = 1, NC
        do i = 1, NC
          if 


          grid.role(i,j,k) = cube

    call ut__message_leader("grid d1", self.d1)
    call ut__message_leader("grid d2", self.d2)
    do i = 1, NC
      print *, 'grid_pos(', i, ') = ', self.pos(i)
    end do


  end subroutine initialize

end module grid_m